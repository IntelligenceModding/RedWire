buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net'}
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'de.unhappycodings'
version = "${mc_version}-${mod_version}"

java {
    archivesBaseName = 'redwire'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

sourceSets {
    main {
        main.resources.srcDirs += ['src/generated/resources/redwirecore']
    }
    redwirelampsandlighting {
        redwirelampsandlighting.resources.srcDirs += ['src/generated/resources/redwirelampsandlighting']
    }
    redwiredoors {
        redwiredoors.resources.srcDirs += ['src/generated/resources/redwiredoors']
    }
}

configurations {
    redwirelampsandlightingImplementation.extendsFrom(implementation)
    redwirelampsandlightingCompileOnly.extendsFrom(compileOnly)
    redwirelampsandlightingRuntimeOnly.extendsFrom(runtimeOnly)
    redwiredoorsImplementation.extendsFrom(implementation)
    redwiredoorsCompileOnly.extendsFrom(compileOnly)
    redwiredoorsRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(file('src/redwirelampsandlighting/resources/META-INF/accesstransformer.cfg'),
            file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/redwiredoors/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'redwire'

            args "--username", "deadmau5"
            args "--uuid", "1e18d5ff-643d-45c8-b509-43b8461d8614"

            mods {
                redwirecore {
                    source sourceSets.main
                }
                redwirelampsandlighting {
                    source sourceSets.redwirelampsandlighting
                }
                redwiredoors {
                    source sourceSets.redwiredoors
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'redwire'

            mods {
                redwirecore {
                    source sourceSets.main
                }
                redwirelampsandlighting {
                    source sourceSets.redwirelampsandlighting
                }
                redwiredoors {
                    source sourceSets.redwiredoors
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'redwire'

            mods {
                redwirecore {
                    source sourceSets.main
                }
                redwirelampsandlighting {
                    source sourceSets.redwirelampsandlighting
                }
                redwiredoors {
                    source sourceSets.redwiredoors
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'redwirecore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'),
                    '--mod', 'redwirelampsandlighting', '--existing', file('src/redwirelampsandlighting/resources/'),
                    '--mod', 'redwiredoors', '--existing', file('src/redwiredoors/resources/')

            mods {
                redwirecore {
                    source sourceSets.main
                }
                redwirelampsandlighting {
                    source sourceSets.redwirelampsandlighting
                }
                redwiredoors {
                    source sourceSets.redwiredoors
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources/redwirecore' }
sourceSets.redwirelampsandlighting.resources { srcDir 'src/generated/resources/redwirelampsandlighting' }
sourceSets.redwiredoors.resources { srcDir 'src/generated/resources/redwiredoors' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("curse.maven:jei-${jei_version}")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.31')
}

def getManifest(String name) {
    return [
            "Specification-Title"     : name,
            "Specification-Vendor"    : "UnhappyCodings",
            "Specification-Version"   : "${mod_version}",
            "Implementation-Title"    : name,
            "Implementation-Version"  : "${mod_version}",
            "Implementation-Vendor"   : "UnhappyCodings",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

rootProject.tasks.named("processResources") {
    duplicatesStrategy = 'exclude'
}

rootProject.tasks.named("processRedwirelampsandlightingResources") {
    duplicatesStrategy = 'exclude'
}

rootProject.tasks.named("processRedwiredoorsResources") {
    duplicatesStrategy = 'exclude'
}

jar {
    duplicatesStrategy(DuplicatesStrategy.WARN)
    archiveFileName.set("RedWireCore-${project.version}.jar")
    archiveClassifier.set("redwirecore")
    manifest.attributes(getManifest("RedWireCore"))
    from sourceSets.main.output
    afterEvaluate { finalizedBy reobfJar }
}

task redwirelampsandlightingJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.WARN)
    archiveFileName.set("RedWireLampsAndLighting-${project.version}.jar")
    archiveClassifier.set("redwirelampsandlighting")
    manifest.attributes(getManifest("RedWireLampsAndLighting"))
    from sourceSets.redwirelampsandlighting.output
    afterEvaluate { finalizedBy reobfRedwirelampsandlightingJar}
}

task redwiredoorsJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.WARN)
    archiveFileName.set("RedWireDoors-${project.version}.jar")
    archiveClassifier.set("redwiredoors")
    manifest.attributes(getManifest("RedWireDoors"))
    from sourceSets.redwiredoors.output
    afterEvaluate { finalizedBy reobfRedwiredoorsJar}
}

reobf {
    jar {classpath.from(sourceSets.main.compileClasspath)}
    redwirelampsandlightingJar {classpath.from(sourceSets.redwirelampsandlighting.compileClasspath)}
    redwiredoorsJar {classpath.from(sourceSets.redwiredoors.compileClasspath)}
}

artifacts {
    archives jar
    archives redwirelampsandlightingJar
    archives redwiredoorsJar
}